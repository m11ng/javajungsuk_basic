abstract class Unit2 {
	 int x, y;
	 abstract void move(int x, int y);
	 void stop() { System.out.println("멈춥니다.");}
}
	 
	 
interface Fightable {
	// 인터페이스의 모든 메서드는 public abstract이기 때문에 생략가능.
	void move(int x, int y);
	void attack(Fightable f);
}

class Fighter extends Unit2 implements Fightable {
	// 오버라이딩 규칙 : 조상보다 접근 제어자가 좁으면 안된다.

	public void move(int x, int y) {
		System.out.println("[" + x + ", " + y + "] 로 이동");
	}
	
	public void attack(Fightable f) {
		System.out.println(f + "를 공격");
	}
	
	Fightable getFightable() {
		Fighter f = new Fighter();
		return f;
	}
	
}

public class FighterTest {

	public static void main(String[] args) {
		
		Fighter f = new Fighter();
		Fightable f2 = f.getFightable();

		f.move(100, 200);
		f.attack(new Fighter());
		
	}

}
